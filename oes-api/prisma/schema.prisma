datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../ERD.svg"
// }

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String        @unique
  password    String
  firstname   String?
  lastname    String?
  role        Role
  avatar      String?
  subject     UserSubject[]
  examination Examination[]
  invigilate  Invigilate[]
  isEnabled   Boolean       @default(true)
}

// Dự kiến phát sinh thêm role admin để đủ point cho team 3 người
enum Role {
  ADMIN
  MANAGER
  LECTURER
  STUDENT
}

// một giám thị sẽ giám thị nhiều bài thi
model Invigilate {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?       @db.ObjectId
  examination Examination[]
  isEnabled   Boolean       @default(true)
}

model Examination {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  startAt      DateTime?
  submitAt     DateTime?
  status       ExaminationStatus
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?           @db.ObjectId
  Invigilate   Invigilate?       @relation(fields: [invigilateId], references: [id])
  invigilateId String?           @db.ObjectId
  isEnabled    Boolean           @default(true)
  topic        Topic?            @relation(fields: [topicId], references: [id])
  topicId      String?           @db.ObjectId
}

enum ExaminationStatus {
  NOT_STARTED
  PREPARING
  IN_PROGRESS
  PASS
  FAIL
}

// Đề bài
// Một đề bài có thể có nhiều câu hỏi
model Topic {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  question    Question[]
  examination Examination[]
  isEnabled   Boolean       @default(true)
}

// Câu hỏi
// Một câu hỏi có thể có nhiều đáp án
model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  description String?
  topic       Topic?   @relation(fields: [topicId], references: [id])
  topicId     String?  @db.ObjectId
  answers     Answer[]
  subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   String?  @db.ObjectId
  isEnabled   Boolean  @default(true)
}

model UserSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  isEnabled Boolean  @default(true)
  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@unique([userId, subjectId])
}

model Subject {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  code        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String?
  question    Question[]
  user        UserSubject[]
  isEnabled   Boolean       @default(true)
}

// Đáp án
model Answer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  isCorrect  Boolean
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
  isEnabled  Boolean   @default(true)
}
